// Autogenerated - don't touch!
#ifndef ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_H_
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_H_
#include <iostream>
#include <string.h>
#include <string> 
#include <vector>
#include <map>
#include "Variant.h"
#include "dbus/dbus.h"
#include "DBusInterface.h"
#include "Marshall.h"

namespace Xanguli {
  template<class impl> 
  class org_freedesktop_DBus_Introspectable : public DBusInterface {
  private:
    DBusMessage* handleCall_Introspect(DBusMessage* message) {
      std::cout << "Ind i Introspect\n";
      std::string v_data;
      
      obj->Introspect(v_data); 
      DBusMessage* reply = dbus_message_new_method_return(message);

      DBusMessageIter outIter;
      dbus_message_iter_init_append(reply, &outIter); 
      std::cout << "Puttin " << v_data << " on reply\n";
      deMarshall(&outIter, v_data);
      return reply; 
    };

    impl* obj;
  public:
    org_freedesktop_DBus_Introspectable(impl* obj){
      this->obj = obj;
      this->xml = 
        "<interface name='org.freedesktop.DBus.Introspectable'>\n"
        "  <method name='Introspect'>\n"
        "    <arg name='data' type='s' direction='out'/>\n"
        "  </method>\n"
        "</interface>\n"
	;
    };

    virtual DBusMessage* handleCall(DBusMessage* message) {
      const char* methodName = dbus_message_get_member(message);
      if (strcmp("Introspect", methodName) == 0)  {
        return handleCall_Introspect(message);
      } 
      else
        return dbus_message_new_error(message, DBUS_ERROR_FAILED, "No such method"); 
    };

    std::string GetInterfaceName() {
      return "org.freedesktop.DBus.Introspectable"; 
    };
  };
}
#endif /* ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_H_ */
